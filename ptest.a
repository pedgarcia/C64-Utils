                /* 
                     ---- ptest ----
                
                Temp 'driver' program to test pwrap.sub - subroutine to wrap text 
                when writing directly to screen memory)

                See pwrap.sub for comments on use and limitations
                 
                */ 

.pc = $1000     //  Call with "sys4096" currently. 
                //  Relocatable code. No hard-wired addresses present.
		 
ptest:
            jsr bt          // build table of screen addresses for column 0
                            // of each screen line. 

                            // NOTE: bt.sub uses strp! Must save pointer

            lda vmcsb       // VIC-II control register
            ora #2
            sta vmcsb       // select uppercase/lowercase character set
    
                            // initialize screen memory pointer 'scnp'
                            // and other variables
            lda #$00
            sta.z curlin
            sta.z curcol
            sta.z scnp        // low byte of screen RAM = zero
            lda #$04        // high byte of screen RAM ($0400)
            sta.z scnp+1
    
// ==== Test Section: 
            lda #<puw_str   // put address of start of string "puw_str"
            sta.z strp        // into zero-page pointer 'strp' (low byte)
            lda #>puw_str   // high byte of start of string(s)
            sta.z strp+1      // initialize high byte of string pointer
            jsr pwrap       // print the string
            
            lda #$00        // clear "wrap flag" (wf) so that text
            sta.z wf          // will be printed w/o word wrap
            lda #<string1   // put address of start of test string(s)
            sta.z strp        // into zero-page pointer 'strp' (low byte)
            lda #>string1   // high byte of start of string(s)
            sta.z strp+1      // initialize high byte of string pointer
            jsr pwrap       // test printing strings not wrapped
    
            pha             // save accumulator
        
            lda #<pwr_str   // put address of start of string "pwr_str"
            sta.z strp        // into zero-page pointer 'strp' (low byte)
            lda #>pwr_str   // high byte of start of string(s)
            sta.z strp+1      // initialize high byte of string pointer
            jsr pwrap       // print the string

            lda #$01        // set "wrap flag" (wf) to select option to
            sta.z wf          // wrap text at the end of lines
            lda #<string1   // put address of start of test string(s)
            sta.z strp        // into zero-page pointer 'strp' (low byte)
            lda #>string1   // high byte of start of string(s)
            sta.z strp+1      // initialize high byte of string pointer

            jsr pwrap       // test printing strings wrapped

            pla             // restore accumulator
            rts             // return to caller     

// ==== Data Area ====
   
                // Zero-page pointers and single-byte variables:

.label strp     = $fb       // String Pointer
.label scnp     = $fd       // Screen Pointer (video RAM)
.label curlin   = $a5       // current line number
.label curcol   = $a6       // current column number
.label curlen   = $a7       // length of current non-space string segment
.label savy     = $a8       // temporary storage for 'Y' register
.label wf       = $a9       // wrap flag for print.
                            // if wf is set, print with word wrapping. 
                            // if flag is clear, print w/o wrapping



                // CBM Kernal registers and subroutines:

.label vmcsb    = $d018     // VIC-II memory control register
.label plot     = $e50a     // Kernal routine to position the cursor

                // Text string(s)

puw_str:    .text "Print string unwrapped:" .byte 0

pwr_str:    .text "Print string wrapped:" .byte 0

string1:    .text "This is another test. I will put in several different strings "
            .text "to check the operation of the wrap subroutine. This line"
            .text " does not have leading spaces in it. Line ends here.  "
            .text "Another line follows: "
            .text "This line ends with a zero delimiter. Bye now!"
            .byte 0  // End-of-string delimiter

// ==== End of Data Area ====


.import source "pwrap.sub"  // Subroutine under test

//
// ---- end of ptest.a
