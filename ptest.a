                // Installed git and committed this file 
                // 
                //    ptest
                //
                //  temp driver program to test
                //  pwrap.sub (Subroutine to wrap text)
                // 
                // 

.pc = $1000     //  Call with "sys4096"
		 
jmp ptest       // skip over data area


.label strp = $fb			//  String Pointer
.label scnp = $fd 			//  Screen Pointer (video RAM)
.label curlin = $a5			//  current line number
.label curcol = $a6			//  current column number
.label curlen = $a7			//  length of current non-space string segment
.label savy = $a8			//  temporary storage for 'Y' register

.label vmcsb    = $d018     // VIC-II memory control register
.label plot     = $e50a     // Kernal routine to position the cursor

wf:      .byte 0            // wrap flag for print.
                            // 
                            // if wf is set, print with word wrapping. 
                            // if flag is clear, print w/o wrapping

dogetl:  .byte 0            // flag - do getlength

					
string1:	.text "This is another test. I will put in several different strings "
        	.text "to check the operation of the wrap subroutine. This line"
        	.text " does not have leading spaces in it. Line ends here.  "
		 	.text "Another line follows: "
		 	.byte 13 //  Return char
		 	.text "This line ends with a zero delimiter. Bye now!"
		 	.byte 0  // End-of-string delimiter

ptest:
         jsr bt             // builld table of screen
                            // addresses for col 0
                            // NOTE: bt.sub uses strp!

         lda vmcsb          // vic-II control reg
         ora #2
         sta vmcsb          // select uppercase/lowercase charset

         lda #<string1
         sta strp
         lda #>string1
         sta strp+1

                            // initialize scnp pointer and
                            // curlin & curcol

         lda #$00
         sta curlin
         sta curcol
         sta scnp
         lda #$04
         sta scnp+1

         lda #$ff
         sta dogetl         // set flag for getlen so it will be
                            // called on next non-space

         lda #$00           // clear "wrap flag" (wf) so that text
         sta wf             // will be printed w/o word wrap
         jsr pwrap          // test printing strings not wrapped

         pha                // save accumulator
         lda #$01           // set "wrap flag" (wf) so that text
         sta wf             // will be wrapped at the end of lines
         
         inc curlin         // so that we have a blank line between 
                            // previous text and new.

         jsr pwrap          // test printing strings wrapped
         pla                // get saved accumulator
         rts                // return to calling prg

.import source "pwrap.sub"  // Subroutine under test
//
// end of ptest.a //
