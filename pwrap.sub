
// ==================================================
// 
//   Subroutine "pwrap.sub"
// 
// ==================================================

         	// 
         	// Prints a string to screen
         	// using direct writing to video memory.
         	//
         	// Zero-page pointers 'strp' (string pointer) and 'scnp' 
         	// (screen pointer) are defined in calling program.
         	//
         	// For newline, routine advances 'scnp' to point to column zero
         	// of next line (also updates variables curlin & curcol)
         	//
         	// also (optionally) wraps a word to the next line 
         	// if it would run past the last column on the line.
         	// (determined by flag 'wf' set in calling program)
         	//
         	// NOTE:  this and other string-handling subroutines in this
         	// collection are currently limited to processing strings of
         	// length < 256. 
         	// 
         	// Future Mods and Projects:
         	// ** re-write to track line number in curlin, so 
         	//    that we don't have to resort to calculating it.  (!)
         	// 
         	// ** re-write so that 'y' index register is synchronized 
         	//    for strp and scrp pointers. For each new line, strp and scrp
         	//    should both be referenced to column zero (y=0), in effect
         	//    adding 40 to both screen and string pointers in ZP.
			//    Y index for each line should therefore 
         	//    be limited to range 0-39 (screen and string pointers)
         	//
         	// ** add ability to handle strings longer than 256 bytes. 
         	//
         	// ** add ability to handle control characters such as <CR>. This will 
         	//    assume that we're not using screen codes as the input strings. 
         	// 

pwrap:   	// save registers on stack

         	pha
         	txa
         	pha
         	tya
         	pha

         	lda #0
         	sta curcol		// start on column 0

         	// get screen address for column zero of current row
         	// and initialize variables

         	jsr setline 	// uses curlin)

			// sets (scnp) to column zero of line number in curlin

			ldy #$ff		// index into string

// =================================  MAIN LOOP ============================			

loop1:    	iny 			// main loop; point to next char in string

noiny:   	lda (strp),y 	// char in string
			beq out1 		// delimiter reached. Jump out.
			cmp #$20 		// space char?
			bne chkwf		// if not, print the character or string segment
isspc:
			jsr prin 		// char is <space>; print it.
			clc
			bcc loop1

         	// check wrap flag 'wf'. Print string wrapped if flag is set.
         	// Print string without wrap if flag is clear.
chkwf:
         	lda wf
         	bne pwrapped 	// flag is set; print wrapped
	
         	//  wf is clear//  print entire string without word wrap.
pnwloop:
			lda (strp),y 	// get char in string
			beq out1	 	// delimiter reached; done
pnwc:		sty savy		// save strp's y index
		    ldy curcol    	// index for printing current line
			jsr prin		// print char- which also increments curcol.
			ldy savy      	// get strp's y index back
			iny				// increment to point to next char in string
			bne pnwloop		// branch back and get next char (branch always)	
			brk				// never reached, but is a marker in object code

pwrapped:
							// flag 'wf' is set; print string segment wrapped.
         	jsr getlen 		// get length of non-space portion of
         	           		// current string (and store in curlen)
chkrm:	
         	lda curlen		// get length of current string segment and
         	clc 			// check for space left on current line
         	adc curcol 		// if curlen + curcol is > $28, we have 
         					// to wrap the string segment to next line.
	       	clc
         	cmp #$28
	
         	bcc nowrap		// carry is clear, so we have room on current
         					// line to print string segment.
	
yeswrap: 	// string segment would run past end of line. Print it on a
         	// new line.
	
         	jsr newline		//  move cursor to the next line, on column zero
			
nowrap:  	ldx curlen 		//  get index for loop (set in subr. getlen)
	
prinlp:	
         	// getlen did not upddate 'y' - it's still pointing to the
         	// first non-space char in current string segment.

			lda (strp),y 	// next character in string
			sty savy		// save y reg
			ldy curcol		// (scnp) 'y' index
			jsr prin		// print char in A 
			ldy savy		// get (strp) 'y' back.
			iny 			// point to next char in string
			dex				// index into current string segment
			bne prinlp		// loop until done.
			lda #0
			sta curlen		//  reset curlen to zero

			beq noiny 		// we're already pointing to next char in string, 
							// so jump to main loop, skipping 'iny'

							// print current character, checking for end-of-line
prin:
			sta (scnp),y	// assumes char in 'A' is screencode
			inc curcol		// update column #
			lda curcol		// if we're at column 40, print a newline
			cmp #$28		// greater than 40?
			bne prinrts		// no- print string segment w/o newline
			jsr newline		// move cursor to next line, column zero
							// newline also increments curlin
						
prinrts:	rts 			// return to caller


out1:
			jsr newline
			
			// use Kernal routine "PLOT" to set cursor position to one
			// line past the printed string, before returning to BASIC.
			
			ldy #0			// curlin // column #
			
			inc curlin 		//  one row down
			ldx curlin 		// row position
			clc
			jsr plot
			
			//  restore registers A, x and y
			pla
			tay
			pla
			tax
			pla
			
			rts 			// return to caller
			
			// 
			//  end Subroutine "pwrap.sub"
			// 
			// 
			// required subroutine sources follow:
		
			.import source "newline.sub"	// prints a newline
			.import source "bt.sub"			// builds table of column zero addresses
			.import source "cls.sub"		// clear screen
			.import source "getlen.sub"		// get length of current non-space string segment

			// 
			//  ---- End of subroutine 'pwrap'
		
