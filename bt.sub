							//  
							//  ---- Subroutine "bt.sub" ----
							// 
							// Build table of addresses in RAM for 
							// screen addresses column 0 of each line 0-24
							//
							// NOTE: uses zero-page string pointer "strp". 
							// Call this subroutine before using
							// strp to manipulate strings.

bt: 
							//  save 'y' register
		tya
		pha

		ldy #$00			// pointer index
		lda #<scntbl
		sta strp
		lda #>scntbl
		sta strp+1

		lda #0				// start of scntble
		sta scntbl			// low byte
		lda #4
		sta scntbl+1			// high byte

btloop:	cpy #$30			// done 24 addresses?
		beq out				// yes- jump out
		lda (strp),y			// low byte
		clc
		adc #$28			// decimal 40
		iny
		iny
		sta (strp),y			// next addr
		bcs incrhi			// incr. high byte
		// 
		dey					// point to high byte
		lda (strp),y			// prev. addr
		iny
		iny
		sta (strp),y			// next addr
		dey					// point back to low byte of address
		bcc btloop

incrhi:	dey					// point to high byte
		lda (strp),y
		iny
		iny
		clc
		adc #1				// increment it.
		sta (strp),y
		dey
		bcc btloop			// do more

out:						// restore 'y'
		pla
		tay

		rts

							// area for table
scntbl:	.byte 0
.pc = scntbl+50				// 50 bytes = 25
							// address words
							// 
							//  end Subroutine "bt.sub"
							// 

